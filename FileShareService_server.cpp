//This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "./gen-cpp/FileShareService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <stdexcept>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::azure::storage::linuxFileClient;

class FileShareServiceHandler : virtual public FileShareServiceIf {
	public:
  	FileShareServiceHandler() {
    	// Your initialization goes here
  	}

	void MapFileShare(std::string& _return, const std::string& smbShareAddress, const std::string& username, const std::string& password, const std::string& mountPoint) {
    	// Your implementation goes here
		std::string xsmbVersion = "2.1";
		std::string mountCommand = "mount -t cifs " + smbShareAddress + " " + mountPoint + " -o vers='" + xsmbVersion + "',username='" + username + "',password='" + password + "',dir_mode=0777,file_mode=0777";
		std::string ret = exec(mountCommand.c_str());
    	std::cout << ret << std::endl;
  	}

	void UnmapFileContainer(const std::string& mountPoint) {
    	// Your implementation goes here
		std::string unmountCommand = "umount " + mountPoint;
		std::string ret = exec(unmountCommand.c_str());
		std::cout << ret << std::endl;

  	}

	std::string exec(const char* cmd) {
		char buffer[128];
		std::string result = "";
		FILE* pipe = popen(cmd, "r");
		if (!pipe) throw std::runtime_error("popen() failed!");
	    try {
	        while (!feof(pipe)) {
	            if (fgets(buffer, 128, pipe) != NULL)
	                result += buffer;
	        }
	    } catch (...) {
			pclose(pipe);
		    throw;
		}
		pclose(pipe);
		return result;
	}
};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<FileShareServiceHandler> handler(new FileShareServiceHandler());
  shared_ptr<TProcessor> processor(new FileShareServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  FileShareServiceHandler* Handler = new FileShareServiceHandler();
  std::string ret = "";
  Handler->MapFileShare(ret, "//xufyantest.file.core.windows.net/linuxsmbtest", "xufyantest", "tBSSYLXWuh6KM1b3a5nLY6/DITPfSN2M27cpiNT3R23RtVV9QN8Ax3iaCe9axHfe1y558o/R8atLtFs3s0cx4w==", "/fileshare");
  server.serve();
  return 0;
}

