/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef LinuxFileClient_TYPES_H
#define LinuxFileClient_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace azure { namespace storage { namespace linuxFileClient {

struct MatchInformation {
  enum type {
    OnlyOnServer = 1,
    OnlyInKeys = 2,
    DeletedOnClient = 3,
    Match = 4
  };
};

extern const std::map<int, const char*> _MatchInformation_VALUES_TO_NAMES;

class ChunkInfo;

class StreamDataLayout;

typedef struct _ChunkInfo__isset {
  _ChunkInfo__isset() : OffSet(false), Length(false), Version(false), IsNullDataWritten(false), IsCorrupted(false) {}
  bool OffSet :1;
  bool Length :1;
  bool Version :1;
  bool IsNullDataWritten :1;
  bool IsCorrupted :1;
} _ChunkInfo__isset;

class ChunkInfo {
 public:

  ChunkInfo(const ChunkInfo&);
  ChunkInfo& operator=(const ChunkInfo&);
  ChunkInfo() : OffSet(0), Length(0), Version(0), IsNullDataWritten(0), IsCorrupted(0) {
  }

  virtual ~ChunkInfo() throw();
  int64_t OffSet;
  int32_t Length;
  int8_t Version;
  bool IsNullDataWritten;
  bool IsCorrupted;

  _ChunkInfo__isset __isset;

  void __set_OffSet(const int64_t val);

  void __set_Length(const int32_t val);

  void __set_Version(const int8_t val);

  void __set_IsNullDataWritten(const bool val);

  void __set_IsCorrupted(const bool val);

  bool operator == (const ChunkInfo & rhs) const
  {
    if (!(OffSet == rhs.OffSet))
      return false;
    if (!(Length == rhs.Length))
      return false;
    if (!(Version == rhs.Version))
      return false;
    if (!(IsNullDataWritten == rhs.IsNullDataWritten))
      return false;
    if (!(IsCorrupted == rhs.IsCorrupted))
      return false;
    return true;
  }
  bool operator != (const ChunkInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChunkInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ChunkInfo &a, ChunkInfo &b);

inline std::ostream& operator<<(std::ostream& out, const ChunkInfo& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _StreamDataLayout__isset {
  _StreamDataLayout__isset() : Chunks(false), Length(false) {}
  bool Chunks :1;
  bool Length :1;
} _StreamDataLayout__isset;

class StreamDataLayout {
 public:

  StreamDataLayout(const StreamDataLayout&);
  StreamDataLayout& operator=(const StreamDataLayout&);
  StreamDataLayout() : Length(0) {
  }

  virtual ~StreamDataLayout() throw();
  std::vector<ChunkInfo>  Chunks;
  int64_t Length;

  _StreamDataLayout__isset __isset;

  void __set_Chunks(const std::vector<ChunkInfo> & val);

  void __set_Length(const int64_t val);

  bool operator == (const StreamDataLayout & rhs) const
  {
    if (!(Chunks == rhs.Chunks))
      return false;
    if (!(Length == rhs.Length))
      return false;
    return true;
  }
  bool operator != (const StreamDataLayout &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StreamDataLayout & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(StreamDataLayout &a, StreamDataLayout &b);

inline std::ostream& operator<<(std::ostream& out, const StreamDataLayout& obj)
{
  obj.printTo(out);
  return out;
}

}}} // namespace

#endif
